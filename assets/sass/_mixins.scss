@mixin hover {
    @media(hover: hover){
        @content;
    }
}
@mixin xsm-u {
    @media(min-width: map-get($breakpoints, xsm)){
        @content;
    }
}
@mixin sm-u {
    @media(min-width: map-get($breakpoints, sm)){
        @content;
    }
}
@mixin md-u {
    @media(min-width: map-get($breakpoints, md)){
        @content;
    }
}
@mixin lg-u {
    @media(min-width: map-get($breakpoints, lg)){
        @content;
    }
}
@mixin xl-u {
    @media(min-width: map-get($breakpoints, xl)){
        @content;
    }
}
@mixin xxl-u {
    @media(min-width: map-get($breakpoints, xxl)){
        @content;
    }
}

@mixin xsm {
    @media(max-width: #{map-get($breakpoints, xsm) - 1}){
        @content;
    }
}
@mixin sm {
    @media(max-width: #{map-get($breakpoints, sm) - 1}){
        @content;
    }
}
@mixin md {
    @media(max-width: #{map-get($breakpoints, md) - 1}){
        @content;
    }
}
@mixin lg {
    @media(max-width: #{map-get($breakpoints, lg) - 1}){
        @content;
    }
}
@mixin xl {
    @media(max-width: #{map-get($breakpoints, xl) - 1}){
        @content;
    }
}
@mixin xxl {
    @media(max-width: #{map-get($breakpoints, xxl) - 1}){
        @content;
    }
}

@mixin aspect-ratio ($width, $height) {
    height: 0;
    padding: 0 !important;
    padding-bottom: calc( ($height / $width) * 100% ) !important;
}

@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @if $digits > 0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }
    @if $mode == round {
        @return calc(round($number * $n) / $n);
    } @else if $mode == ceil {
        @return calc(ceil($number * $n) / $n);
    } @else if $mode == floor {
        @return calc(floor($number * $n) / $n);
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

@function vw($px) {
    $result: calc($px * 100 / 1440);
    @return decimal-round($result, 3) + vw;
}
@function xvw($px) {
    $result: calc($px * 100 / 320);
    @return decimal-round($result, 3) + vw;
}

@function pb($width, $height) {
    $result: calc($height / $width * 100%);
    @return decimal-round($result, 3);
}

@function ls($px, $percent){
    $result: calc($percent * $px / -100);
    @return decimal-round($result, 3) + px;
}
